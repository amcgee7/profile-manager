/*
* This file was generated by the CommonAPI Generators. 
* Used org.genivi.commonapi.core 2.1.4.201311151436.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include "ProfileManagerDBusStubAdapter.h"
#include <org/genivi/profile_mgmt/ProfileManager.h>

namespace org {
namespace genivi {
namespace profile_mgmt {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createProfileManagerDBusStubAdapter(
                   const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                   const std::string& commonApiAddress,
                   const std::string& interfaceName,
                   const std::string& busName,
                   const std::string& objectPath,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyConnection,
                   const std::shared_ptr<CommonAPI::StubBase>& stubBase) {
    return std::make_shared<ProfileManagerDBusStubAdapter>(factory, commonApiAddress, interfaceName, busName, objectPath, dbusProxyConnection, stubBase);
}

__attribute__((constructor)) void registerProfileManagerDBusStubAdapter(void) {
    CommonAPI::DBus::DBusFactory::registerAdapterFactoryMethod(ProfileManager::getInterfaceId(),
                                                               &createProfileManagerDBusStubAdapter);
}

ProfileManagerDBusStubAdapter::ProfileManagerDBusStubAdapter(
        const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
        const std::string& commonApiAddress,
        const std::string& dbusInterfaceName,
        const std::string& dbusBusName,
        const std::string& dbusObjectPath,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusConnection,
        const std::shared_ptr<CommonAPI::StubBase>& stub):
        ProfileManagerDBusStubAdapterHelper(factory, commonApiAddress, dbusInterfaceName, dbusBusName, dbusObjectPath, 
            dbusConnection, std::dynamic_pointer_cast<ProfileManagerStub>(stub),
            false) {
}

ProfileManagerDBusStubAdapter::~ProfileManagerDBusStubAdapter() {
    deactivateManagedInstances();
    deinit();
    stub_.reset();
}

void ProfileManagerDBusStubAdapter::deactivateManagedInstances() {
}

const char* ProfileManagerDBusStubAdapter::getMethodsDBusIntrospectionXmlData() const {
    static const char* introspectionData =
        "<method name=\"registerMe\">\n"
            "<arg name=\"consumerAddress\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"appID\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"seatID\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"unregisterMe\">\n"
            "<arg name=\"consumerAddress\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"appID\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"seatID\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"confirm\">\n"
            "<arg name=\"sessionID\" type=\"t\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"stopped\">\n"
            "<arg name=\"sessionID\" type=\"t\" direction=\"in\" />\n"
        "</method>\n"
        
    ;
    return introspectionData;
}



static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ProfileManagerStub,
    std::tuple<std::string, std::string, int32_t>,
    std::tuple<>
    > registerMeStubDispatcher(&ProfileManagerStub::registerMe, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ProfileManagerStub,
    std::tuple<std::string, std::string, int32_t>,
    std::tuple<>
    > unregisterMeStubDispatcher(&ProfileManagerStub::unregisterMe, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ProfileManagerStub,
    std::tuple<uint64_t>,
    std::tuple<>
    > confirmStubDispatcher(&ProfileManagerStub::confirm, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ProfileManagerStub,
    std::tuple<uint64_t>,
    std::tuple<>
    > stoppedStubDispatcher(&ProfileManagerStub::stopped, "");



const ProfileManagerDBusStubAdapter::StubDispatcherTable& ProfileManagerDBusStubAdapter::getStubDispatcherTable() {
    static const ProfileManagerDBusStubAdapter::StubDispatcherTable stubDispatcherTable = {
            { { "registerMe", "ssi" }, &org::genivi::profile_mgmt::registerMeStubDispatcher },
            { { "unregisterMe", "ssi" }, &org::genivi::profile_mgmt::unregisterMeStubDispatcher },
            { { "confirm", "t" }, &org::genivi::profile_mgmt::confirmStubDispatcher },
            { { "stopped", "t" }, &org::genivi::profile_mgmt::stoppedStubDispatcher }
            };
    return stubDispatcherTable;
}


} // namespace profile_mgmt
} // namespace genivi
} // namespace org
