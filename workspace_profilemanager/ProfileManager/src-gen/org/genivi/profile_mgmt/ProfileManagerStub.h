/*
* This file was generated by the CommonAPI Generators. 
* Used org.genivi.commonapi.core 2.1.2.201309301424.
* Used org.franca.core 0.8.10.201309262002.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef ORG_GENIVI_PROFILE_MGMT_Profile_Manager_STUB_H_
#define ORG_GENIVI_PROFILE_MGMT_Profile_Manager_STUB_H_




#include "ProfileManager.h"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#include <CommonAPI/Stub.h>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace profile_mgmt {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service ProfileManager. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class ProfileManagerStubAdapter: virtual public CommonAPI::StubAdapter, public ProfileManager {
 public:

    
    
    virtual void deactivateManagedInstances() = 0;
    
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};


/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for ProfileManager.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class ProfileManagerStubRemoteEvent {
 public:
    virtual ~ProfileManagerStubRemoteEvent() { }

};


/**
 * Defines the interface that must be implemented by any class that should provide
 * the service ProfileManager to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class ProfileManagerStub : public CommonAPI::Stub<ProfileManagerStubAdapter , ProfileManagerStubRemoteEvent> {
 public:
    virtual ~ProfileManagerStub() { }


    /// This is the method that will be called on remote calls on the method registerMe.
    virtual void registerMe(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string consumerAddress, std::string appID, int32_t seatID) = 0;
    /// This is the method that will be called on remote calls on the method unregisterMe.
    virtual void unregisterMe(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string consumerAddress, std::string appID, int32_t seatID) = 0;
    /// This is the method that will be called on remote calls on the method confirm.
    virtual void confirm(const std::shared_ptr<CommonAPI::ClientId> clientId, uint64_t sessionID) = 0;
    /// This is the method that will be called on remote calls on the method stopped.
    virtual void stopped(const std::shared_ptr<CommonAPI::ClientId> clientId, uint64_t sessionID) = 0;
    
};

} // namespace profile_mgmt
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_PROFILE_MGMT_Profile_Manager_STUB_H_
