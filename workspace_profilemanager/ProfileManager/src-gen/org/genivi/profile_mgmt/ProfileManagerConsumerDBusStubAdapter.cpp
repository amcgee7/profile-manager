/*
* This file was generated by the CommonAPI Generators. 
* Used org.genivi.commonapi.core 2.1.2.201309301424.
* Used org.franca.core 0.8.10.201309262002.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include "ProfileManagerConsumerDBusStubAdapter.h"
#include <org/genivi/profile_mgmt/ProfileManagerConsumer.h>

namespace org {
namespace genivi {
namespace profile_mgmt {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createProfileManagerConsumerDBusStubAdapter(
                   const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                   const std::string& commonApiAddress,
                   const std::string& interfaceName,
                   const std::string& busName,
                   const std::string& objectPath,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyConnection,
                   const std::shared_ptr<CommonAPI::StubBase>& stubBase) {
    return std::make_shared<ProfileManagerConsumerDBusStubAdapter>(factory, commonApiAddress, interfaceName, busName, objectPath, dbusProxyConnection, stubBase);
}

__attribute__((constructor)) void registerProfileManagerConsumerDBusStubAdapter(void) {
    CommonAPI::DBus::DBusFactory::registerAdapterFactoryMethod(ProfileManagerConsumer::getInterfaceId(),
                                                               &createProfileManagerConsumerDBusStubAdapter);
}

ProfileManagerConsumerDBusStubAdapter::ProfileManagerConsumerDBusStubAdapter(
        const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
        const std::string& commonApiAddress,
        const std::string& dbusInterfaceName,
        const std::string& dbusBusName,
        const std::string& dbusObjectPath,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusConnection,
        const std::shared_ptr<CommonAPI::StubBase>& stub):
        ProfileManagerConsumerDBusStubAdapterHelper(factory, commonApiAddress, dbusInterfaceName, dbusBusName, dbusObjectPath, 
            dbusConnection, std::dynamic_pointer_cast<ProfileManagerConsumerStub>(stub),
            NULL)
            {
}

ProfileManagerConsumerDBusStubAdapter::~ProfileManagerConsumerDBusStubAdapter() {
    deactivateManagedInstances();
    deinit();
    stub_.reset();
}

void ProfileManagerConsumerDBusStubAdapter::deactivateManagedInstances() {
}

const char* ProfileManagerConsumerDBusStubAdapter::getMethodsDBusIntrospectionXmlData() const {
    static const char* introspectionData =
        "<method name=\"detectedUser\">\n"
            "<arg name=\"seatID\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"userID\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"sessionID\" type=\"t\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"synchronizedUser\">\n"
            "<arg name=\"seatID\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"userID\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"sessionID\" type=\"t\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"stop\">\n"
            "<arg name=\"seatID\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"sessionID\" type=\"t\" direction=\"in\" />\n"
        "</method>\n"
    ;
    return introspectionData;
}



static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ProfileManagerConsumerStub,
    std::tuple<int32_t, int32_t, uint64_t>,
    std::tuple<>
    > detectedUserStubDispatcher(&ProfileManagerConsumerStub::detectedUser, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ProfileManagerConsumerStub,
    std::tuple<int32_t, int32_t, uint64_t>,
    std::tuple<>
    > synchronizedUserStubDispatcher(&ProfileManagerConsumerStub::synchronizedUser, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ProfileManagerConsumerStub,
    std::tuple<int32_t, uint64_t>,
    std::tuple<>
    > stopStubDispatcher(&ProfileManagerConsumerStub::stop, "");



const ProfileManagerConsumerDBusStubAdapter::StubDispatcherTable& ProfileManagerConsumerDBusStubAdapter::getStubDispatcherTable() {
    static const ProfileManagerConsumerDBusStubAdapter::StubDispatcherTable stubDispatcherTable = {
            { { "detectedUser", "iit" }, &org::genivi::profile_mgmt::detectedUserStubDispatcher },
            { { "synchronizedUser", "iit" }, &org::genivi::profile_mgmt::synchronizedUserStubDispatcher },
            { { "stop", "it" }, &org::genivi::profile_mgmt::stopStubDispatcher }
            };
    return stubDispatcherTable;
}


} // namespace profile_mgmt
} // namespace genivi
} // namespace org
