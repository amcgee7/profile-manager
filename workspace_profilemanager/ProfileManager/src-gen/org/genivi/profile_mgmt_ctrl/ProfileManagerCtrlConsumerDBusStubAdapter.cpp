/*
* This file was generated by the CommonAPI Generators. 
* Used org.genivi.commonapi.core 2.1.4.201311151436.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include "ProfileManagerCtrlConsumerDBusStubAdapter.h"
#include <org/genivi/profile_mgmt_ctrl/ProfileManagerCtrlConsumer.h>

namespace org {
namespace genivi {
namespace profile_mgmt_ctrl {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createProfileManagerCtrlConsumerDBusStubAdapter(
                   const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                   const std::string& commonApiAddress,
                   const std::string& interfaceName,
                   const std::string& busName,
                   const std::string& objectPath,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyConnection,
                   const std::shared_ptr<CommonAPI::StubBase>& stubBase) {
    return std::make_shared<ProfileManagerCtrlConsumerDBusStubAdapter>(factory, commonApiAddress, interfaceName, busName, objectPath, dbusProxyConnection, stubBase);
}

__attribute__((constructor)) void registerProfileManagerCtrlConsumerDBusStubAdapter(void) {
    CommonAPI::DBus::DBusFactory::registerAdapterFactoryMethod(ProfileManagerCtrlConsumer::getInterfaceId(),
                                                               &createProfileManagerCtrlConsumerDBusStubAdapter);
}

ProfileManagerCtrlConsumerDBusStubAdapter::ProfileManagerCtrlConsumerDBusStubAdapter(
        const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
        const std::string& commonApiAddress,
        const std::string& dbusInterfaceName,
        const std::string& dbusBusName,
        const std::string& dbusObjectPath,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusConnection,
        const std::shared_ptr<CommonAPI::StubBase>& stub):
        ProfileManagerCtrlConsumerDBusStubAdapterHelper(factory, commonApiAddress, dbusInterfaceName, dbusBusName, dbusObjectPath, 
            dbusConnection, std::dynamic_pointer_cast<ProfileManagerCtrlConsumerStub>(stub),
            false) {
}

ProfileManagerCtrlConsumerDBusStubAdapter::~ProfileManagerCtrlConsumerDBusStubAdapter() {
    deactivateManagedInstances();
    deinit();
    stub_.reset();
}

void ProfileManagerCtrlConsumerDBusStubAdapter::deactivateManagedInstances() {
}

const char* ProfileManagerCtrlConsumerDBusStubAdapter::getMethodsDBusIntrospectionXmlData() const {
    static const char* introspectionData =
        "<method name=\"onTimeOut\">\n"
            "<arg name=\"appName\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"userId\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"seatId\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"s\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"sessionId\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"timeElapsedMs\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"timeOutSessionId\" type=\"t\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"onStateChangeStart\">\n"
            "<arg name=\"userId\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"seatId\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"depLevel\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"s\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"sessionId\" type=\"t\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"onStateChangeStop\">\n"
            "<arg name=\"userId\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"seatId\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"depLevel\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"s\" type=\"i\" direction=\"in\" />\n"
            "<arg name=\"sessionId\" type=\"t\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"onClientRegister\">\n"
            "<arg name=\"appName\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"seatId\" type=\"u\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"onClientUnregister\">\n"
            "<arg name=\"appName\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"seatId\" type=\"u\" direction=\"in\" />\n"
        "</method>\n"
        
    ;
    return introspectionData;
}



static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ProfileManagerCtrlConsumerStub,
    std::tuple<std::string, uint32_t, uint32_t, ProfileManagerCtrlConsumer::ESignal, uint64_t, int32_t, uint64_t>,
    std::tuple<>
    > onTimeOutStubDispatcher(&ProfileManagerCtrlConsumerStub::onTimeOut, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ProfileManagerCtrlConsumerStub,
    std::tuple<uint32_t, uint32_t, int32_t, ProfileManagerCtrlConsumer::ESignal, uint64_t>,
    std::tuple<>
    > onStateChangeStartStubDispatcher(&ProfileManagerCtrlConsumerStub::onStateChangeStart, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ProfileManagerCtrlConsumerStub,
    std::tuple<uint32_t, uint32_t, int32_t, ProfileManagerCtrlConsumer::ESignal, uint64_t>,
    std::tuple<>
    > onStateChangeStopStubDispatcher(&ProfileManagerCtrlConsumerStub::onStateChangeStop, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ProfileManagerCtrlConsumerStub,
    std::tuple<std::string, uint32_t>,
    std::tuple<>
    > onClientRegisterStubDispatcher(&ProfileManagerCtrlConsumerStub::onClientRegister, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ProfileManagerCtrlConsumerStub,
    std::tuple<std::string, uint32_t>,
    std::tuple<>
    > onClientUnregisterStubDispatcher(&ProfileManagerCtrlConsumerStub::onClientUnregister, "");



const ProfileManagerCtrlConsumerDBusStubAdapter::StubDispatcherTable& ProfileManagerCtrlConsumerDBusStubAdapter::getStubDispatcherTable() {
    static const ProfileManagerCtrlConsumerDBusStubAdapter::StubDispatcherTable stubDispatcherTable = {
            { { "onTimeOut", "suuitit" }, &org::genivi::profile_mgmt_ctrl::onTimeOutStubDispatcher },
            { { "onStateChangeStart", "uuiit" }, &org::genivi::profile_mgmt_ctrl::onStateChangeStartStubDispatcher },
            { { "onStateChangeStop", "uuiit" }, &org::genivi::profile_mgmt_ctrl::onStateChangeStopStubDispatcher },
            { { "onClientRegister", "su" }, &org::genivi::profile_mgmt_ctrl::onClientRegisterStubDispatcher },
            { { "onClientUnregister", "su" }, &org::genivi::profile_mgmt_ctrl::onClientUnregisterStubDispatcher }
            };
    return stubDispatcherTable;
}


} // namespace profile_mgmt_ctrl
} // namespace genivi
} // namespace org
