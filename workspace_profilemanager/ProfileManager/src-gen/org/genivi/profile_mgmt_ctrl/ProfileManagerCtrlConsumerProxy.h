/*
* This file was generated by the CommonAPI Generators. 
* Used org.genivi.commonapi.core 2.1.2.201309301424.
* Used org.franca.core 0.8.10.201309262002.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef ORG_GENIVI_PROFILE_MGMT_CTRL_Profile_Manager_Ctrl_Consumer_PROXY_H_
#define ORG_GENIVI_PROFILE_MGMT_CTRL_Profile_Manager_Ctrl_Consumer_PROXY_H_

#include "ProfileManagerCtrlConsumerProxyBase.h"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif


#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace profile_mgmt_ctrl {

template <typename ... _AttributeExtensions>
class ProfileManagerCtrlConsumerProxy: virtual public ProfileManagerCtrlConsumer, virtual public ProfileManagerCtrlConsumerProxyBase, public _AttributeExtensions... {
 public:
    ProfileManagerCtrlConsumerProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~ProfileManagerCtrlConsumerProxy();



    /**
     * Calls onTimeOut with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void onTimeOut(const std::string& appName, const uint32_t& userId, const uint32_t& seatId, const ProfileManagerCtrlConsumer::ESignal& s, const uint64_t& sessionId, const int32_t& timeElapsedMs, const uint64_t& timeOutSessionId, CommonAPI::CallStatus& callStatus);
    /**
     * Calls onTimeOut with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> onTimeOutAsync(const std::string& appName, const uint32_t& userId, const uint32_t& seatId, const ProfileManagerCtrlConsumer::ESignal& s, const uint64_t& sessionId, const int32_t& timeElapsedMs, const uint64_t& timeOutSessionId, OnTimeOutAsyncCallback callback);
    /**
     * Calls onStateChangeStart with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void onStateChangeStart(const uint32_t& userId, const uint32_t& seatId, const int32_t& depLevel, const ProfileManagerCtrlConsumer::ESignal& s, const uint64_t& sessionId, CommonAPI::CallStatus& callStatus);
    /**
     * Calls onStateChangeStart with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> onStateChangeStartAsync(const uint32_t& userId, const uint32_t& seatId, const int32_t& depLevel, const ProfileManagerCtrlConsumer::ESignal& s, const uint64_t& sessionId, OnStateChangeStartAsyncCallback callback);
    /**
     * Calls onStateChangeStop with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void onStateChangeStop(const uint32_t& userId, const uint32_t& seatId, const int32_t& depLevel, const ProfileManagerCtrlConsumer::ESignal& s, const uint64_t& sessionId, CommonAPI::CallStatus& callStatus);
    /**
     * Calls onStateChangeStop with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> onStateChangeStopAsync(const uint32_t& userId, const uint32_t& seatId, const int32_t& depLevel, const ProfileManagerCtrlConsumer::ESignal& s, const uint64_t& sessionId, OnStateChangeStopAsyncCallback callback);
    /**
     * Calls onClientRegister with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void onClientRegister(const std::string& appName, const uint32_t& seatId, CommonAPI::CallStatus& callStatus);
    /**
     * Calls onClientRegister with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> onClientRegisterAsync(const std::string& appName, const uint32_t& seatId, OnClientRegisterAsyncCallback callback);
    /**
     * Calls onClientUnregister with synchronous semantics.
     * 
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void onClientUnregister(const std::string& appName, const uint32_t& seatId, CommonAPI::CallStatus& callStatus);
    /**
     * Calls onClientUnregister with asynchronous semantics.
     * 
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> onClientUnregisterAsync(const std::string& appName, const uint32_t& seatId, OnClientUnregisterAsyncCallback callback);
    

    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual std::string getAddress() const;

    /**
     * Returns the domain of the remote partner this proxy communicates with.
     */
    virtual const std::string& getDomain() const;

    /** 
     * Returns the service ID of the remote partner this proxy communicates with.
     */
    virtual const std::string& getServiceId() const;

    /**
     * Returns the instance ID of the remote partner this proxy communicates with.
     */
    virtual const std::string& getInstanceId() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr<ProfileManagerCtrlConsumerProxyBase> delegate_;
};


//
// ProfileManagerCtrlConsumerProxy Implementation
//
template <typename ... _AttributeExtensions>
ProfileManagerCtrlConsumerProxy<_AttributeExtensions...>::ProfileManagerCtrlConsumerProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        delegate_(std::dynamic_pointer_cast<ProfileManagerCtrlConsumerProxyBase>(delegate)),
        _AttributeExtensions(*(std::dynamic_pointer_cast<ProfileManagerCtrlConsumerProxyBase>(delegate)))... {
}

template <typename ... _AttributeExtensions>
ProfileManagerCtrlConsumerProxy<_AttributeExtensions...>::~ProfileManagerCtrlConsumerProxy() {
}

template <typename ... _AttributeExtensions>
void ProfileManagerCtrlConsumerProxy<_AttributeExtensions...>::onTimeOut(const std::string& appName, const uint32_t& userId, const uint32_t& seatId, const ProfileManagerCtrlConsumer::ESignal& s, const uint64_t& sessionId, const int32_t& timeElapsedMs, const uint64_t& timeOutSessionId, CommonAPI::CallStatus& callStatus) {
    delegate_->onTimeOut(appName, userId, seatId, s, sessionId, timeElapsedMs, timeOutSessionId, callStatus);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ProfileManagerCtrlConsumerProxy<_AttributeExtensions...>::onTimeOutAsync(const std::string& appName, const uint32_t& userId, const uint32_t& seatId, const ProfileManagerCtrlConsumer::ESignal& s, const uint64_t& sessionId, const int32_t& timeElapsedMs, const uint64_t& timeOutSessionId, OnTimeOutAsyncCallback callback) {
    return delegate_->onTimeOutAsync(appName, userId, seatId, s, sessionId, timeElapsedMs, timeOutSessionId, callback);
}
template <typename ... _AttributeExtensions>
void ProfileManagerCtrlConsumerProxy<_AttributeExtensions...>::onStateChangeStart(const uint32_t& userId, const uint32_t& seatId, const int32_t& depLevel, const ProfileManagerCtrlConsumer::ESignal& s, const uint64_t& sessionId, CommonAPI::CallStatus& callStatus) {
    delegate_->onStateChangeStart(userId, seatId, depLevel, s, sessionId, callStatus);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ProfileManagerCtrlConsumerProxy<_AttributeExtensions...>::onStateChangeStartAsync(const uint32_t& userId, const uint32_t& seatId, const int32_t& depLevel, const ProfileManagerCtrlConsumer::ESignal& s, const uint64_t& sessionId, OnStateChangeStartAsyncCallback callback) {
    return delegate_->onStateChangeStartAsync(userId, seatId, depLevel, s, sessionId, callback);
}
template <typename ... _AttributeExtensions>
void ProfileManagerCtrlConsumerProxy<_AttributeExtensions...>::onStateChangeStop(const uint32_t& userId, const uint32_t& seatId, const int32_t& depLevel, const ProfileManagerCtrlConsumer::ESignal& s, const uint64_t& sessionId, CommonAPI::CallStatus& callStatus) {
    delegate_->onStateChangeStop(userId, seatId, depLevel, s, sessionId, callStatus);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ProfileManagerCtrlConsumerProxy<_AttributeExtensions...>::onStateChangeStopAsync(const uint32_t& userId, const uint32_t& seatId, const int32_t& depLevel, const ProfileManagerCtrlConsumer::ESignal& s, const uint64_t& sessionId, OnStateChangeStopAsyncCallback callback) {
    return delegate_->onStateChangeStopAsync(userId, seatId, depLevel, s, sessionId, callback);
}
template <typename ... _AttributeExtensions>
void ProfileManagerCtrlConsumerProxy<_AttributeExtensions...>::onClientRegister(const std::string& appName, const uint32_t& seatId, CommonAPI::CallStatus& callStatus) {
    delegate_->onClientRegister(appName, seatId, callStatus);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ProfileManagerCtrlConsumerProxy<_AttributeExtensions...>::onClientRegisterAsync(const std::string& appName, const uint32_t& seatId, OnClientRegisterAsyncCallback callback) {
    return delegate_->onClientRegisterAsync(appName, seatId, callback);
}
template <typename ... _AttributeExtensions>
void ProfileManagerCtrlConsumerProxy<_AttributeExtensions...>::onClientUnregister(const std::string& appName, const uint32_t& seatId, CommonAPI::CallStatus& callStatus) {
    delegate_->onClientUnregister(appName, seatId, callStatus);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> ProfileManagerCtrlConsumerProxy<_AttributeExtensions...>::onClientUnregisterAsync(const std::string& appName, const uint32_t& seatId, OnClientUnregisterAsyncCallback callback) {
    return delegate_->onClientUnregisterAsync(appName, seatId, callback);
}

template <typename ... _AttributeExtensions>
std::string ProfileManagerCtrlConsumerProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
const std::string& ProfileManagerCtrlConsumerProxy<_AttributeExtensions...>::getDomain() const {
    return delegate_->getDomain();
}

template <typename ... _AttributeExtensions>
const std::string& ProfileManagerCtrlConsumerProxy<_AttributeExtensions...>::getServiceId() const {
    return delegate_->getServiceId();
}

template <typename ... _AttributeExtensions>
const std::string& ProfileManagerCtrlConsumerProxy<_AttributeExtensions...>::getInstanceId() const {
    return delegate_->getInstanceId();
}

template <typename ... _AttributeExtensions>
bool ProfileManagerCtrlConsumerProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool ProfileManagerCtrlConsumerProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& ProfileManagerCtrlConsumerProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& ProfileManagerCtrlConsumerProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}

        

} // namespace profile_mgmt_ctrl
} // namespace genivi
} // namespace org


#endif // ORG_GENIVI_PROFILE_MGMT_CTRL_Profile_Manager_Ctrl_Consumer_PROXY_H_
