/*
* This file was generated by the CommonAPI Generators. 
* Used org.genivi.commonapi.core 2.1.4.201311151436.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef ORG_GENIVI_PROFILE_MGMT_CTRL_Profile_Manager_Ctrl_Consumer_H_
#define ORG_GENIVI_PROFILE_MGMT_CTRL_Profile_Manager_Ctrl_Consumer_H_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.h>
#include <CommonAPI/OutputStream.h>
#include <CommonAPI/types.h>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace profile_mgmt_ctrl {

class ProfileManagerCtrlConsumer {
 public:
    virtual ~ProfileManagerCtrlConsumer() { }

    static inline const char* getInterfaceId();
    static inline CommonAPI::Version getInterfaceVersion();
    enum class ESignal: int32_t {
        eConfirm,
        eStopped
    };
    
    // Definition of a comparator still is necessary for GCC 4.4.1, topic is fixed since 4.5.1
    struct ESignalComparator;
};

const char* ProfileManagerCtrlConsumer::getInterfaceId() {
    static const char* interfaceId = "org.genivi.profile_mgmt_ctrl.ProfileManagerCtrlConsumer";
    return interfaceId;
}

CommonAPI::Version ProfileManagerCtrlConsumer::getInterfaceVersion() {
    return CommonAPI::Version(1, 0);
}

inline CommonAPI::InputStream& operator>>(CommonAPI::InputStream& inputStream, ProfileManagerCtrlConsumer::ESignal& enumValue) {
    return inputStream.readEnumValue<int32_t>(enumValue);
}

inline CommonAPI::OutputStream& operator<<(CommonAPI::OutputStream& outputStream, const ProfileManagerCtrlConsumer::ESignal& enumValue) {
    return outputStream.writeEnumValue(static_cast<int32_t>(enumValue));
}

struct ProfileManagerCtrlConsumer::ESignalComparator {
    inline bool operator()(const ESignal& lhs, const ESignal& rhs) const {
        return static_cast<int32_t>(lhs) < static_cast<int32_t>(rhs);
    }
};


} // namespace profile_mgmt_ctrl
} // namespace genivi
} // namespace org

namespace CommonAPI {
    template<>
    struct BasicTypeWriter<org::genivi::profile_mgmt_ctrl::ProfileManagerCtrlConsumer::ESignal> {
        inline static void writeType (CommonAPI::TypeOutputStream& typeStream) {
            typeStream.writeInt32EnumType();
        }
    };
    
    template<>
    struct InputStreamVectorHelper<org::genivi::profile_mgmt_ctrl::ProfileManagerCtrlConsumer::ESignal> {
        static void beginReadVector(InputStream& inputStream, const std::vector<org::genivi::profile_mgmt_ctrl::ProfileManagerCtrlConsumer::ESignal>& vectorValue) {
            inputStream.beginReadInt32EnumVector();
        }
    };
    
    template <>
    struct OutputStreamVectorHelper<org::genivi::profile_mgmt_ctrl::ProfileManagerCtrlConsumer::ESignal> {
        static void beginWriteVector(OutputStream& outputStream, const std::vector<org::genivi::profile_mgmt_ctrl::ProfileManagerCtrlConsumer::ESignal>& vectorValue) {
            outputStream.beginWriteInt32EnumVector(vectorValue.size());
        }
    };

}


namespace std {
    //hashes for types
    //Hash for ESignal
    template<>
    struct hash<org::genivi::profile_mgmt_ctrl::ProfileManagerCtrlConsumer::ESignal> {
        inline size_t operator()(const org::genivi::profile_mgmt_ctrl::ProfileManagerCtrlConsumer::ESignal& eSignal) const {
            return static_cast<int32_t>(eSignal);
        }
    };
    
    //hashes for error types
}

#endif // ORG_GENIVI_PROFILE_MGMT_CTRL_Profile_Manager_Ctrl_Consumer_H_
