/*
* This file was generated by the CommonAPI Generators. 
* Used org.genivi.commonapi.core 2.1.4.201311151436.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include "ProfileManagerCtrlDBusStubAdapter.h"
#include <org/genivi/profile_mgmt_ctrl/ProfileManagerCtrl.h>

namespace org {
namespace genivi {
namespace profile_mgmt_ctrl {

std::shared_ptr<CommonAPI::DBus::DBusStubAdapter> createProfileManagerCtrlDBusStubAdapter(
                   const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                   const std::string& commonApiAddress,
                   const std::string& interfaceName,
                   const std::string& busName,
                   const std::string& objectPath,
                   const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyConnection,
                   const std::shared_ptr<CommonAPI::StubBase>& stubBase) {
    return std::make_shared<ProfileManagerCtrlDBusStubAdapter>(factory, commonApiAddress, interfaceName, busName, objectPath, dbusProxyConnection, stubBase);
}

__attribute__((constructor)) void registerProfileManagerCtrlDBusStubAdapter(void) {
    CommonAPI::DBus::DBusFactory::registerAdapterFactoryMethod(ProfileManagerCtrl::getInterfaceId(),
                                                               &createProfileManagerCtrlDBusStubAdapter);
}

ProfileManagerCtrlDBusStubAdapter::ProfileManagerCtrlDBusStubAdapter(
        const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
        const std::string& commonApiAddress,
        const std::string& dbusInterfaceName,
        const std::string& dbusBusName,
        const std::string& dbusObjectPath,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusConnection,
        const std::shared_ptr<CommonAPI::StubBase>& stub):
        ProfileManagerCtrlDBusStubAdapterHelper(factory, commonApiAddress, dbusInterfaceName, dbusBusName, dbusObjectPath, 
            dbusConnection, std::dynamic_pointer_cast<ProfileManagerCtrlStub>(stub),
            false) {
}

ProfileManagerCtrlDBusStubAdapter::~ProfileManagerCtrlDBusStubAdapter() {
    deactivateManagedInstances();
    deinit();
    stub_.reset();
}

void ProfileManagerCtrlDBusStubAdapter::deactivateManagedInstances() {
}

const char* ProfileManagerCtrlDBusStubAdapter::getMethodsDBusIntrospectionXmlData() const {
    static const char* introspectionData =
        "<method name=\"registerMe\">\n"
            "<arg name=\"consumerAddress\" type=\"s\" direction=\"in\" />\n"
            "<arg name=\"registerOnTimeOut\" type=\"b\" direction=\"in\" />\n"
            "<arg name=\"registerOnStateChangeStart\" type=\"b\" direction=\"in\" />\n"
            "<arg name=\"registerOnStateChangeStop\" type=\"b\" direction=\"in\" />\n"
            "<arg name=\"registerOnClientRegister\" type=\"b\" direction=\"in\" />\n"
            "<arg name=\"registerOnClientUnregister\" type=\"b\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"setUser\">\n"
            "<arg name=\"userId\" type=\"u\" direction=\"in\" />\n"
            "<arg name=\"seatId\" type=\"u\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"unsetUser\">\n"
            "<arg name=\"seatId\" type=\"u\" direction=\"in\" />\n"
        "</method>\n"
        "<method name=\"timeOutAction\">\n"
            "<arg name=\"timeOutSessionId\" type=\"t\" direction=\"in\" />\n"
            "<arg name=\"timeOutActionItem\" type=\"i\" direction=\"in\" />\n"
        "</method>\n"
        
    ;
    return introspectionData;
}



static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ProfileManagerCtrlStub,
    std::tuple<std::string, bool, bool, bool, bool, bool>,
    std::tuple<>
    > registerMeStubDispatcher(&ProfileManagerCtrlStub::registerMe, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ProfileManagerCtrlStub,
    std::tuple<uint32_t, uint32_t>,
    std::tuple<>
    > setUserStubDispatcher(&ProfileManagerCtrlStub::setUser, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ProfileManagerCtrlStub,
    std::tuple<uint32_t>,
    std::tuple<>
    > unsetUserStubDispatcher(&ProfileManagerCtrlStub::unsetUser, "");
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    ProfileManagerCtrlStub,
    std::tuple<uint64_t, ProfileManagerCtrl::ETimeOutAction>,
    std::tuple<>
    > timeOutActionStubDispatcher(&ProfileManagerCtrlStub::timeOutAction, "");



const ProfileManagerCtrlDBusStubAdapter::StubDispatcherTable& ProfileManagerCtrlDBusStubAdapter::getStubDispatcherTable() {
    static const ProfileManagerCtrlDBusStubAdapter::StubDispatcherTable stubDispatcherTable = {
            { { "registerMe", "sbbbbb" }, &org::genivi::profile_mgmt_ctrl::registerMeStubDispatcher },
            { { "setUser", "uu" }, &org::genivi::profile_mgmt_ctrl::setUserStubDispatcher },
            { { "unsetUser", "u" }, &org::genivi::profile_mgmt_ctrl::unsetUserStubDispatcher },
            { { "timeOutAction", "ti" }, &org::genivi::profile_mgmt_ctrl::timeOutActionStubDispatcher }
            };
    return stubDispatcherTable;
}


} // namespace profile_mgmt_ctrl
} // namespace genivi
} // namespace org
