/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.core 2.1.2.201309301424.
 * Used org.franca.core 0.8.10.201309262002.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */

#ifndef PROFILEMANAGERSTUBIMPL_H_
#define PROFILEMANAGERSTUBIMPL_H_

#include <org/genivi/profile_mgmt/ProfileManagerStubDefault.h>
#include "../ProfileManagerLogic.h"
#include "../ProfileManagerEventHandler.h"

typedef std::string ClientSelector;

/**
 * IMPLEMENTATION OF : ProfileManagerStubDefault : STUB METHODS
 * THESE METHODS ARE INVOKED BY CLIENTS via CommonAPI DBus
 *
 * Provides a default implementation for ProfileManagerStubRemoteEvent and
 * ProfileManagerStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class ProfileManagerStubImpl : public org::genivi::profile_mgmt::ProfileManagerStubDefault{

	ProfileManagerLogic* mLogic;		//to directly invoke the Logic methods  !!SHALL NOT BE USED -> WHOLE DBUS IS BLOCKED!!
	event_handler* mEventHandler; 		//to push events to the queue

public:

	ProfileManagerStubImpl( ProfileManagerLogic& logic, event_handler * eventHandler);
	virtual ~ProfileManagerStubImpl();


	void registerMe(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string consumerAddress, std::string appID, int32_t seatID);
	void registerMe(std::string consumerAddress, std::string appID, int32_t seatID);

	void unregisterMe(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string consumerAddress, std::string appID, int32_t seatID);
	void unregisterMe(std::string consumerAddress, std::string appID, int32_t seatID);

	void confirm(const std::shared_ptr<CommonAPI::ClientId> clientId, uint64_t sessionID);
	void confirm(uint64_t sessionID);

	void stopped(const std::shared_ptr<CommonAPI::ClientId> clientId, uint64_t sessionID);
	void stopped(uint64_t sessionID);

};

#endif
