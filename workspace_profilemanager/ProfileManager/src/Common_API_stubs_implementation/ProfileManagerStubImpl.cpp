/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.core 2.1.2.201309301424.
 * Used org.franca.core 0.8.10.201309262002.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#include "ProfileManagerStubImpl.h"
#include <iostream>


ProfileManagerStubImpl::ProfileManagerStubImpl( ProfileManagerLogic& logic,event_handler * eventHandler):mLogic(&logic), mEventHandler(eventHandler){}
ProfileManagerStubImpl::~ProfileManagerStubImpl(){

}




void ProfileManagerStubImpl::registerMe(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string consumerAddress, std::string appID, int32_t seatID) {
	registerMe(consumerAddress, appID, seatID);
}
void ProfileManagerStubImpl::registerMe(ClientSelector consumerAddress, std::string appID, int32_t seatID) {
	std::cout<<"Client: " << appID <<" on address: " << consumerAddress <<" is invoking registerMe!\n";
	mEventHandler->eventQueue.push(new event_logicClientReceive_Register(consumerAddress,appID,seatID));
	std::cout<<"registerMe event from Client pushed to queue\n\n";
}




void ProfileManagerStubImpl::unregisterMe(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string consumerAddress, std::string appID, int32_t seatID) {
	unregisterMe(consumerAddress, appID, seatID);
}
void ProfileManagerStubImpl::unregisterMe(ClientSelector consumerAddress, std::string appID, int32_t seatID) {
	std::cout<<"Client: " << appID <<" on address: " << consumerAddress <<" is invoking unregisterMe!\n";
	mEventHandler->eventQueue.push(new event_logicClientReceive_Unregister(consumerAddress,appID,seatID));
	std::cout<<"unregisterMe event from Client pushed to queue\n\n";
}




void ProfileManagerStubImpl::confirm(const std::shared_ptr<CommonAPI::ClientId> clientId, uint64_t sessionID) {
	confirm(sessionID);
}
void ProfileManagerStubImpl::confirm(uint64_t sessionID) {
	std::cout<<"Client using sesseionID: " << sessionID <<" is invoking confirm!\n";
	mEventHandler->eventQueue.push(new event_logicClientReceive_Confirm(sessionID));
	std::cout<<"Confirm event from Client pushed to queue\n\n";
}



void ProfileManagerStubImpl::stopped(const std::shared_ptr<CommonAPI::ClientId> clientId, uint64_t sessionID) {
	stopped(sessionID);
}
void ProfileManagerStubImpl::stopped(uint64_t sessionID) {
	std::cout<<"Client using sesseionID: " << sessionID <<" is invoking stopped!\n";
	mEventHandler->eventQueue.push(new event_logicClientReceive_Stopped(sessionID));
	std::cout<<"Stopped event from Client pushed to queue\n\n";
}


