/*
* This file was generated by the CommonAPI Generators. 
* Used org.genivi.commonapi.core 2.1.2.201309301424.
* Used org.franca.core 0.8.10.201309262002.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include "ProfileManagerConsumerDBusProxy.h"

namespace org {
namespace genivi {
namespace profile_mgmt {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createProfileManagerConsumerDBusProxy(
                    const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyConnection) {
    return std::make_shared<ProfileManagerConsumerDBusProxy>(factory, commonApiAddress, interfaceName, busName, objectPath, dbusProxyConnection);
}

__attribute__((constructor)) void registerProfileManagerConsumerDBusProxy(void) {
    CommonAPI::DBus::DBusFactory::registerProxyFactoryMethod(ProfileManagerConsumer::getInterfaceId(),
       &createProfileManagerConsumerDBusProxy);
}

ProfileManagerConsumerDBusProxy::ProfileManagerConsumerDBusProxy(
                    const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyconnection):
        CommonAPI::DBus::DBusProxy(factory, commonApiAddress, interfaceName, busName, objectPath, dbusProxyconnection)
    {
    }



void ProfileManagerConsumerDBusProxy::detectedUser(const int32_t& seatID, const int32_t& userID, const uint64_t& sessionID, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<int32_t, int32_t, uint64_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "detectedUser",
        "iit",
        seatID, userID, sessionID, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> ProfileManagerConsumerDBusProxy::detectedUserAsync(const int32_t& seatID, const int32_t& userID, const uint64_t& sessionID, DetectedUserAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<int32_t, int32_t, uint64_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "detectedUser",
        "iit",
        seatID, userID, sessionID, 
        std::move(callback));
}
void ProfileManagerConsumerDBusProxy::synchronizedUser(const int32_t& seatID, const int32_t& userID, const uint64_t& sessionID, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<int32_t, int32_t, uint64_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "synchronizedUser",
        "iit",
        seatID, userID, sessionID, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> ProfileManagerConsumerDBusProxy::synchronizedUserAsync(const int32_t& seatID, const int32_t& userID, const uint64_t& sessionID, SynchronizedUserAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<int32_t, int32_t, uint64_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "synchronizedUser",
        "iit",
        seatID, userID, sessionID, 
        std::move(callback));
}
void ProfileManagerConsumerDBusProxy::stop(const int32_t& seatID, const uint64_t& sessionID, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<int32_t, uint64_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "stop",
        "it",
        seatID, sessionID, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> ProfileManagerConsumerDBusProxy::stopAsync(const int32_t& seatID, const uint64_t& sessionID, StopAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<int32_t, uint64_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "stop",
        "it",
        seatID, sessionID, 
        std::move(callback));
}



void ProfileManagerConsumerDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
}

} // namespace profile_mgmt
} // namespace genivi
} // namespace org
