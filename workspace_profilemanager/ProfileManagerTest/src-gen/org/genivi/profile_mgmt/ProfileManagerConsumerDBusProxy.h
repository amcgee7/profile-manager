/*
* This file was generated by the CommonAPI Generators. 
* Used org.genivi.commonapi.core 2.1.2.201309301424.
* Used org.franca.core 0.8.10.201309262002.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef ORG_GENIVI_PROFILE_MGMT_Profile_Manager_Consumer_DBUS_PROXY_H_
#define ORG_GENIVI_PROFILE_MGMT_Profile_Manager_Consumer_DBUS_PROXY_H_

#include <org/genivi/profile_mgmt/ProfileManagerConsumerProxyBase.h>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusFactory.h>
#include <CommonAPI/DBus/DBusProxy.h>

#undef COMMONAPI_INTERNAL_COMPILATION

#include <string>

namespace org {
namespace genivi {
namespace profile_mgmt {

class ProfileManagerConsumerDBusProxy: virtual public ProfileManagerConsumerProxyBase, virtual public CommonAPI::DBus::DBusProxy {
 public:
    ProfileManagerConsumerDBusProxy(
                    const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyconnection);

    virtual ~ProfileManagerConsumerDBusProxy() { }



    virtual void detectedUser(const int32_t& seatID, const int32_t& userID, const uint64_t& sessionID, CommonAPI::CallStatus& callStatus);
    virtual std::future<CommonAPI::CallStatus> detectedUserAsync(const int32_t& seatID, const int32_t& userID, const uint64_t& sessionID, DetectedUserAsyncCallback callback);
    virtual void synchronizedUser(const int32_t& seatID, const int32_t& userID, const uint64_t& sessionID, CommonAPI::CallStatus& callStatus);
    virtual std::future<CommonAPI::CallStatus> synchronizedUserAsync(const int32_t& seatID, const int32_t& userID, const uint64_t& sessionID, SynchronizedUserAsyncCallback callback);
    virtual void stop(const int32_t& seatID, const uint64_t& sessionID, CommonAPI::CallStatus& callStatus);
    virtual std::future<CommonAPI::CallStatus> stopAsync(const int32_t& seatID, const uint64_t& sessionID, StopAsyncCallback callback);
    

    virtual void getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const;

 private:

    
};



} // namespace profile_mgmt
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_PROFILE_MGMT_Profile_Manager_Consumer_DBUS_PROXY_H_
