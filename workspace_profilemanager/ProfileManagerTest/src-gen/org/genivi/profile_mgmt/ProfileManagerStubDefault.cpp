/*
* This file was generated by the CommonAPI Generators. 
* Used org.genivi.commonapi.core 2.1.2.201309301424.
* Used org.franca.core 0.8.10.201309262002.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <org/genivi/profile_mgmt/ProfileManagerStubDefault.h>

namespace org {
namespace genivi {
namespace profile_mgmt {

ProfileManagerStubDefault::ProfileManagerStubDefault():
        remoteEventHandler_(this) {
}

ProfileManagerStubRemoteEvent* ProfileManagerStubDefault::initStubAdapter(const std::shared_ptr<ProfileManagerStubAdapter>& stubAdapter) {
    stubAdapter_ = stubAdapter;
    return &remoteEventHandler_;
}


void ProfileManagerStubDefault::registerMe(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string consumerAddress, std::string appID, int32_t seatID) {
    // Call old style methods in default 
    registerMe(consumerAddress, appID, seatID);
}
void ProfileManagerStubDefault::registerMe(std::string consumerAddress, std::string appID, int32_t seatID) {
    // No operation in default
}

void ProfileManagerStubDefault::unregisterMe(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string consumerAddress, std::string appID, int32_t seatID) {
    // Call old style methods in default 
    unregisterMe(consumerAddress, appID, seatID);
}
void ProfileManagerStubDefault::unregisterMe(std::string consumerAddress, std::string appID, int32_t seatID) {
    // No operation in default
}

void ProfileManagerStubDefault::confirm(const std::shared_ptr<CommonAPI::ClientId> clientId, uint64_t sessionID) {
    // Call old style methods in default 
    confirm(sessionID);
}
void ProfileManagerStubDefault::confirm(uint64_t sessionID) {
    // No operation in default
}

void ProfileManagerStubDefault::stopped(const std::shared_ptr<CommonAPI::ClientId> clientId, uint64_t sessionID) {
    // Call old style methods in default 
    stopped(sessionID);
}
void ProfileManagerStubDefault::stopped(uint64_t sessionID) {
    // No operation in default
}




ProfileManagerStubDefault::RemoteEventHandler::RemoteEventHandler(ProfileManagerStubDefault* defaultStub):
        defaultStub_(defaultStub) {
}

} // namespace profile_mgmt
} // namespace genivi
} // namespace org
