/*
* This file was generated by the CommonAPI Generators. 
* Used org.genivi.commonapi.core 2.1.4.201311151436.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef ORG_GENIVI_PROFILE_MGMT_CTRL_Profile_Manager_Ctrl_Consumer_PROXY_BASE_H_
#define ORG_GENIVI_PROFILE_MGMT_CTRL_Profile_Manager_Ctrl_Consumer_PROXY_BASE_H_

#include "ProfileManagerCtrlConsumer.h"



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.h>
#include <CommonAPI/OutputStream.h>
#include <cstdint>
#include <vector>

#include <CommonAPI/Proxy.h>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace profile_mgmt_ctrl {

class ProfileManagerCtrlConsumerProxyBase: virtual public CommonAPI::Proxy {
 public:

    typedef std::function<void(const CommonAPI::CallStatus&)> OnTimeOutAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> OnStateChangeStartAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> OnStateChangeStopAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> OnClientRegisterAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&)> OnClientUnregisterAsyncCallback;



    virtual void onTimeOut(const std::string& appName, const uint32_t& userId, const uint32_t& seatId, const ProfileManagerCtrlConsumer::ESignal& s, const uint64_t& sessionId, const int32_t& timeElapsedMs, const uint64_t& timeOutSessionId, CommonAPI::CallStatus& callStatus) = 0;
    virtual std::future<CommonAPI::CallStatus> onTimeOutAsync(const std::string& appName, const uint32_t& userId, const uint32_t& seatId, const ProfileManagerCtrlConsumer::ESignal& s, const uint64_t& sessionId, const int32_t& timeElapsedMs, const uint64_t& timeOutSessionId, OnTimeOutAsyncCallback callback) = 0;
    virtual void onStateChangeStart(const uint32_t& userId, const uint32_t& seatId, const int32_t& depLevel, const ProfileManagerCtrlConsumer::ESignal& s, const uint64_t& sessionId, CommonAPI::CallStatus& callStatus) = 0;
    virtual std::future<CommonAPI::CallStatus> onStateChangeStartAsync(const uint32_t& userId, const uint32_t& seatId, const int32_t& depLevel, const ProfileManagerCtrlConsumer::ESignal& s, const uint64_t& sessionId, OnStateChangeStartAsyncCallback callback) = 0;
    virtual void onStateChangeStop(const uint32_t& userId, const uint32_t& seatId, const int32_t& depLevel, const ProfileManagerCtrlConsumer::ESignal& s, const uint64_t& sessionId, CommonAPI::CallStatus& callStatus) = 0;
    virtual std::future<CommonAPI::CallStatus> onStateChangeStopAsync(const uint32_t& userId, const uint32_t& seatId, const int32_t& depLevel, const ProfileManagerCtrlConsumer::ESignal& s, const uint64_t& sessionId, OnStateChangeStopAsyncCallback callback) = 0;
    virtual void onClientRegister(const std::string& appName, const uint32_t& seatId, CommonAPI::CallStatus& callStatus) = 0;
    virtual std::future<CommonAPI::CallStatus> onClientRegisterAsync(const std::string& appName, const uint32_t& seatId, OnClientRegisterAsyncCallback callback) = 0;
    virtual void onClientUnregister(const std::string& appName, const uint32_t& seatId, CommonAPI::CallStatus& callStatus) = 0;
    virtual std::future<CommonAPI::CallStatus> onClientUnregisterAsync(const std::string& appName, const uint32_t& seatId, OnClientUnregisterAsyncCallback callback) = 0;
};

} // namespace profile_mgmt_ctrl
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_PROFILE_MGMT_CTRL_Profile_Manager_Ctrl_Consumer_PROXY_BASE_H_
