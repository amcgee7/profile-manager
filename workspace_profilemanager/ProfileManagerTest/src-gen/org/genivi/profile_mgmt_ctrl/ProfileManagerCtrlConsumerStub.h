/*
* This file was generated by the CommonAPI Generators. 
* Used org.genivi.commonapi.core 2.1.4.201311151436.
* Used org.franca.core 0.8.11.201401091023.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef ORG_GENIVI_PROFILE_MGMT_CTRL_Profile_Manager_Ctrl_Consumer_STUB_H_
#define ORG_GENIVI_PROFILE_MGMT_CTRL_Profile_Manager_Ctrl_Consumer_STUB_H_




#include "ProfileManagerCtrlConsumer.h"

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.h>
#include <CommonAPI/OutputStream.h>
#include <cstdint>
#include <vector>

#include <CommonAPI/Stub.h>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace org {
namespace genivi {
namespace profile_mgmt_ctrl {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service ProfileManagerCtrlConsumer. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class ProfileManagerCtrlConsumerStubAdapter: virtual public CommonAPI::StubAdapter, public ProfileManagerCtrlConsumer {
 public:

    
    
    virtual void deactivateManagedInstances() = 0;
    
protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
};


/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for ProfileManagerCtrlConsumer.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class ProfileManagerCtrlConsumerStubRemoteEvent {
 public:
    virtual ~ProfileManagerCtrlConsumerStubRemoteEvent() { }

};


/**
 * Defines the interface that must be implemented by any class that should provide
 * the service ProfileManagerCtrlConsumer to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class ProfileManagerCtrlConsumerStub : public CommonAPI::Stub<ProfileManagerCtrlConsumerStubAdapter , ProfileManagerCtrlConsumerStubRemoteEvent> {
 public:
    virtual ~ProfileManagerCtrlConsumerStub() { }


    /// This is the method that will be called on remote calls on the method onTimeOut.
    virtual void onTimeOut(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string appName, uint32_t userId, uint32_t seatId, ProfileManagerCtrlConsumer::ESignal s, uint64_t sessionId, int32_t timeElapsedMs, uint64_t timeOutSessionId) = 0;
    /// This is the method that will be called on remote calls on the method onStateChangeStart.
    virtual void onStateChangeStart(const std::shared_ptr<CommonAPI::ClientId> clientId, uint32_t userId, uint32_t seatId, int32_t depLevel, ProfileManagerCtrlConsumer::ESignal s, uint64_t sessionId) = 0;
    /// This is the method that will be called on remote calls on the method onStateChangeStop.
    virtual void onStateChangeStop(const std::shared_ptr<CommonAPI::ClientId> clientId, uint32_t userId, uint32_t seatId, int32_t depLevel, ProfileManagerCtrlConsumer::ESignal s, uint64_t sessionId) = 0;
    /// This is the method that will be called on remote calls on the method onClientRegister.
    virtual void onClientRegister(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string appName, uint32_t seatId) = 0;
    /// This is the method that will be called on remote calls on the method onClientUnregister.
    virtual void onClientUnregister(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string appName, uint32_t seatId) = 0;
    
};

} // namespace profile_mgmt_ctrl
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_PROFILE_MGMT_CTRL_Profile_Manager_Ctrl_Consumer_STUB_H_
