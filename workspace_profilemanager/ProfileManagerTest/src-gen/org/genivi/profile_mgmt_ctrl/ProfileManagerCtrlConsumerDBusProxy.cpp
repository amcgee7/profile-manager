/*
* This file was generated by the CommonAPI Generators. 
* Used org.genivi.commonapi.core 2.1.2.201309301424.
* Used org.franca.core 0.8.10.201309262002.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include "ProfileManagerCtrlConsumerDBusProxy.h"

namespace org {
namespace genivi {
namespace profile_mgmt_ctrl {

std::shared_ptr<CommonAPI::DBus::DBusProxy> createProfileManagerCtrlConsumerDBusProxy(
                    const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyConnection) {
    return std::make_shared<ProfileManagerCtrlConsumerDBusProxy>(factory, commonApiAddress, interfaceName, busName, objectPath, dbusProxyConnection);
}

__attribute__((constructor)) void registerProfileManagerCtrlConsumerDBusProxy(void) {
    CommonAPI::DBus::DBusFactory::registerProxyFactoryMethod(ProfileManagerCtrlConsumer::getInterfaceId(),
       &createProfileManagerCtrlConsumerDBusProxy);
}

ProfileManagerCtrlConsumerDBusProxy::ProfileManagerCtrlConsumerDBusProxy(
                    const std::shared_ptr<CommonAPI::DBus::DBusFactory>& factory,
                    const std::string& commonApiAddress,
                    const std::string& interfaceName,
                    const std::string& busName,
                    const std::string& objectPath,
                    const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection>& dbusProxyconnection):
        CommonAPI::DBus::DBusProxy(factory, commonApiAddress, interfaceName, busName, objectPath, dbusProxyconnection)
    {
    }



void ProfileManagerCtrlConsumerDBusProxy::onTimeOut(const std::string& appName, const uint32_t& userId, const uint32_t& seatId, const ProfileManagerCtrlConsumer::ESignal& s, const uint64_t& sessionId, const int32_t& timeElapsedMs, const uint64_t& timeOutSessionId, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, uint32_t, uint32_t, ProfileManagerCtrlConsumer::ESignal, uint64_t, int32_t, uint64_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "onTimeOut",
        "suuitit",
        appName, userId, seatId, s, sessionId, timeElapsedMs, timeOutSessionId, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> ProfileManagerCtrlConsumerDBusProxy::onTimeOutAsync(const std::string& appName, const uint32_t& userId, const uint32_t& seatId, const ProfileManagerCtrlConsumer::ESignal& s, const uint64_t& sessionId, const int32_t& timeElapsedMs, const uint64_t& timeOutSessionId, OnTimeOutAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, uint32_t, uint32_t, ProfileManagerCtrlConsumer::ESignal, uint64_t, int32_t, uint64_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "onTimeOut",
        "suuitit",
        appName, userId, seatId, s, sessionId, timeElapsedMs, timeOutSessionId, 
        std::move(callback));
}
void ProfileManagerCtrlConsumerDBusProxy::onStateChangeStart(const uint32_t& userId, const uint32_t& seatId, const int32_t& depLevel, const ProfileManagerCtrlConsumer::ESignal& s, const uint64_t& sessionId, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint32_t, uint32_t, int32_t, ProfileManagerCtrlConsumer::ESignal, uint64_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "onStateChangeStart",
        "uuiit",
        userId, seatId, depLevel, s, sessionId, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> ProfileManagerCtrlConsumerDBusProxy::onStateChangeStartAsync(const uint32_t& userId, const uint32_t& seatId, const int32_t& depLevel, const ProfileManagerCtrlConsumer::ESignal& s, const uint64_t& sessionId, OnStateChangeStartAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint32_t, uint32_t, int32_t, ProfileManagerCtrlConsumer::ESignal, uint64_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "onStateChangeStart",
        "uuiit",
        userId, seatId, depLevel, s, sessionId, 
        std::move(callback));
}
void ProfileManagerCtrlConsumerDBusProxy::onStateChangeStop(const uint32_t& userId, const uint32_t& seatId, const int32_t& depLevel, const ProfileManagerCtrlConsumer::ESignal& s, const uint64_t& sessionId, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint32_t, uint32_t, int32_t, ProfileManagerCtrlConsumer::ESignal, uint64_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "onStateChangeStop",
        "uuiit",
        userId, seatId, depLevel, s, sessionId, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> ProfileManagerCtrlConsumerDBusProxy::onStateChangeStopAsync(const uint32_t& userId, const uint32_t& seatId, const int32_t& depLevel, const ProfileManagerCtrlConsumer::ESignal& s, const uint64_t& sessionId, OnStateChangeStopAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<uint32_t, uint32_t, int32_t, ProfileManagerCtrlConsumer::ESignal, uint64_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "onStateChangeStop",
        "uuiit",
        userId, seatId, depLevel, s, sessionId, 
        std::move(callback));
}
void ProfileManagerCtrlConsumerDBusProxy::onClientRegister(const std::string& appName, const uint32_t& seatId, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, uint32_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "onClientRegister",
        "su",
        appName, seatId, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> ProfileManagerCtrlConsumerDBusProxy::onClientRegisterAsync(const std::string& appName, const uint32_t& seatId, OnClientRegisterAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, uint32_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "onClientRegister",
        "su",
        appName, seatId, 
        std::move(callback));
}
void ProfileManagerCtrlConsumerDBusProxy::onClientUnregister(const std::string& appName, const uint32_t& seatId, CommonAPI::CallStatus& callStatus) {
    CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, uint32_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodWithReply(
        *this,
        "onClientUnregister",
        "su",
        appName, seatId, 
        callStatus
        );
}
std::future<CommonAPI::CallStatus> ProfileManagerCtrlConsumerDBusProxy::onClientUnregisterAsync(const std::string& appName, const uint32_t& seatId, OnClientUnregisterAsyncCallback callback) {
    return CommonAPI::DBus::DBusProxyHelper<CommonAPI::DBus::DBusSerializableArguments<std::string, uint32_t>,
                                     CommonAPI::DBus::DBusSerializableArguments<> >::callMethodAsync(
        *this,
        "onClientUnregister",
        "su",
        appName, seatId, 
        std::move(callback));
}



void ProfileManagerCtrlConsumerDBusProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
}

} // namespace profile_mgmt_ctrl
} // namespace genivi
} // namespace org
