/*
* This file was generated by the CommonAPI Generators. 
* Used org.genivi.commonapi.core 2.1.2.201309301424.
* Used org.franca.core 0.8.10.201309262002.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef ORG_GENIVI_PROFILE_MGMT_CTRL_Profile_Manager_Ctrl_Consumer_STUB_DEFAULT_H_
#define ORG_GENIVI_PROFILE_MGMT_CTRL_Profile_Manager_Ctrl_Consumer_STUB_DEFAULT_H_

#include <org/genivi/profile_mgmt_ctrl/ProfileManagerCtrlConsumerStub.h>
#include <sstream>

namespace org {
namespace genivi {
namespace profile_mgmt_ctrl {

/**
 * Provides a default implementation for ProfileManagerCtrlConsumerStubRemoteEvent and
 * ProfileManagerCtrlConsumerStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class ProfileManagerCtrlConsumerStubDefault : public ProfileManagerCtrlConsumerStub {
 public:
    ProfileManagerCtrlConsumerStubDefault();

    ProfileManagerCtrlConsumerStubRemoteEvent* initStubAdapter(const std::shared_ptr<ProfileManagerCtrlConsumerStubAdapter>& stubAdapter);


    virtual void onTimeOut(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string appName, uint32_t userId, uint32_t seatId, ProfileManagerCtrlConsumer::ESignal s, uint64_t sessionId, int32_t timeElapsedMs, uint64_t timeOutSessionId);
    virtual void onTimeOut(std::string appName, uint32_t userId, uint32_t seatId, ProfileManagerCtrlConsumer::ESignal s, uint64_t sessionId, int32_t timeElapsedMs, uint64_t timeOutSessionId);

    virtual void onStateChangeStart(const std::shared_ptr<CommonAPI::ClientId> clientId, uint32_t userId, uint32_t seatId, int32_t depLevel, ProfileManagerCtrlConsumer::ESignal s, uint64_t sessionId);
    virtual void onStateChangeStart(uint32_t userId, uint32_t seatId, int32_t depLevel, ProfileManagerCtrlConsumer::ESignal s, uint64_t sessionId);

    virtual void onStateChangeStop(const std::shared_ptr<CommonAPI::ClientId> clientId, uint32_t userId, uint32_t seatId, int32_t depLevel, ProfileManagerCtrlConsumer::ESignal s, uint64_t sessionId);
    virtual void onStateChangeStop(uint32_t userId, uint32_t seatId, int32_t depLevel, ProfileManagerCtrlConsumer::ESignal s, uint64_t sessionId);

    virtual void onClientRegister(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string appName, uint32_t seatId);
    virtual void onClientRegister(std::string appName, uint32_t seatId);

    virtual void onClientUnregister(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string appName, uint32_t seatId);
    virtual void onClientUnregister(std::string appName, uint32_t seatId);


    

 protected:
    std::shared_ptr<ProfileManagerCtrlConsumerStubAdapter> stubAdapter_;
 private:
    class RemoteEventHandler: public ProfileManagerCtrlConsumerStubRemoteEvent {
     public:
        RemoteEventHandler(ProfileManagerCtrlConsumerStubDefault* defaultStub);


     private:
        ProfileManagerCtrlConsumerStubDefault* defaultStub_;
    };

    RemoteEventHandler remoteEventHandler_;

};

} // namespace profile_mgmt_ctrl
} // namespace genivi
} // namespace org

#endif // ORG_GENIVI_PROFILE_MGMT_CTRL_Profile_Manager_Ctrl_Consumer_STUB_DEFAULT_H_
