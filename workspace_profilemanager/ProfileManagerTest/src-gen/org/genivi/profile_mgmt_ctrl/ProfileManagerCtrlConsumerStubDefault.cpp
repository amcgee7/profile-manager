/*
* This file was generated by the CommonAPI Generators. 
* Used org.genivi.commonapi.core 2.1.2.201309301424.
* Used org.franca.core 0.8.10.201309262002.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include <org/genivi/profile_mgmt_ctrl/ProfileManagerCtrlConsumerStubDefault.h>

namespace org {
namespace genivi {
namespace profile_mgmt_ctrl {

ProfileManagerCtrlConsumerStubDefault::ProfileManagerCtrlConsumerStubDefault():
        remoteEventHandler_(this) {
}

ProfileManagerCtrlConsumerStubRemoteEvent* ProfileManagerCtrlConsumerStubDefault::initStubAdapter(const std::shared_ptr<ProfileManagerCtrlConsumerStubAdapter>& stubAdapter) {
    stubAdapter_ = stubAdapter;
    return &remoteEventHandler_;
}


void ProfileManagerCtrlConsumerStubDefault::onTimeOut(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string appName, uint32_t userId, uint32_t seatId, ProfileManagerCtrlConsumer::ESignal s, uint64_t sessionId, int32_t timeElapsedMs, uint64_t timeOutSessionId) {
    // Call old style methods in default 
    onTimeOut(appName, userId, seatId, s, sessionId, timeElapsedMs, timeOutSessionId);
}
void ProfileManagerCtrlConsumerStubDefault::onTimeOut(std::string appName, uint32_t userId, uint32_t seatId, ProfileManagerCtrlConsumer::ESignal s, uint64_t sessionId, int32_t timeElapsedMs, uint64_t timeOutSessionId) {
    // No operation in default
}

void ProfileManagerCtrlConsumerStubDefault::onStateChangeStart(const std::shared_ptr<CommonAPI::ClientId> clientId, uint32_t userId, uint32_t seatId, int32_t depLevel, ProfileManagerCtrlConsumer::ESignal s, uint64_t sessionId) {
    // Call old style methods in default 
    onStateChangeStart(userId, seatId, depLevel, s, sessionId);
}
void ProfileManagerCtrlConsumerStubDefault::onStateChangeStart(uint32_t userId, uint32_t seatId, int32_t depLevel, ProfileManagerCtrlConsumer::ESignal s, uint64_t sessionId) {
    // No operation in default
}

void ProfileManagerCtrlConsumerStubDefault::onStateChangeStop(const std::shared_ptr<CommonAPI::ClientId> clientId, uint32_t userId, uint32_t seatId, int32_t depLevel, ProfileManagerCtrlConsumer::ESignal s, uint64_t sessionId) {
    // Call old style methods in default 
    onStateChangeStop(userId, seatId, depLevel, s, sessionId);
}
void ProfileManagerCtrlConsumerStubDefault::onStateChangeStop(uint32_t userId, uint32_t seatId, int32_t depLevel, ProfileManagerCtrlConsumer::ESignal s, uint64_t sessionId) {
    // No operation in default
}

void ProfileManagerCtrlConsumerStubDefault::onClientRegister(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string appName, uint32_t seatId) {
    // Call old style methods in default 
    onClientRegister(appName, seatId);
}
void ProfileManagerCtrlConsumerStubDefault::onClientRegister(std::string appName, uint32_t seatId) {
    // No operation in default
}

void ProfileManagerCtrlConsumerStubDefault::onClientUnregister(const std::shared_ptr<CommonAPI::ClientId> clientId, std::string appName, uint32_t seatId) {
    // Call old style methods in default 
    onClientUnregister(appName, seatId);
}
void ProfileManagerCtrlConsumerStubDefault::onClientUnregister(std::string appName, uint32_t seatId) {
    // No operation in default
}




ProfileManagerCtrlConsumerStubDefault::RemoteEventHandler::RemoteEventHandler(ProfileManagerCtrlConsumerStubDefault* defaultStub):
        defaultStub_(defaultStub) {
}

} // namespace profile_mgmt_ctrl
} // namespace genivi
} // namespace org
