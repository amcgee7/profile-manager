/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.core 2.1.2.201309301424.
 * Used org.franca.core 0.8.10.201309262002.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */

#ifndef CLIENTSTUBIMPL_H_
#define CLIENTSTUBIMPL_H_

#include <org/genivi/profile_mgmt/ProfileManagerConsumerStubDefault.h>
#include "../Client.h"

typedef std::string ClientSelector;

/**
 * IMPLEMENTATION OF ProfileManagerCtrlConsumerStubDefault STUB METHODS
 *
 * Provides a default implementation for ProfileManagerStubRemoteEvent and
 * ProfileManagerStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */

class Client;
class ClientIntf;
class ClientStubImpl : public org::genivi::profile_mgmt::ProfileManagerConsumerStubDefault{

public:
	Client* ptrClient;

	ClientStubImpl( );
	ClientStubImpl( Client * ptr);
	virtual ~ClientStubImpl();



     void detectedUser(const std::shared_ptr<CommonAPI::ClientId> clientId, int32_t seatID, int32_t userID, uint64_t sessionID);
     void detectedUser(int32_t seatID, int32_t userID, uint64_t sessionID);

     void synchronizedUser(const std::shared_ptr<CommonAPI::ClientId> clientId, int32_t seatID, int32_t userID, uint64_t sessionID);
     void synchronizedUser(int32_t seatID, int32_t userID, uint64_t sessionID);

     void stop(const std::shared_ptr<CommonAPI::ClientId> clientId, int32_t seatID, uint64_t sessionID);
     void stop(int32_t seatID, uint64_t sessionID);



};

#endif
